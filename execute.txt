//perplexity ai
/////execute one command
//no redirections

//Step 1: Identify the Command and Arguments
Iterate through the arg array of the t_command struct to identify the command and its arguments.
The first element of the arg array will be the command, and the remaining elements will be the arguments.
//Step 2: Check for Built-in Commands
Check if the command is a built-in command (e.g., echo, cd, pwd, export, unset, env, exit).
If the command is a built-in, call the corresponding built-in function to execute the command.
//Step 3: Execute External Commands
If the command is not a built-in, it's an external command.
Use the fork() and execve() system calls to execute the external command.
fork() creates a new child process.
execve() replaces the child process's image with the specified program.
//Step 4: Handle Environment Variables
If the command or any of its arguments contain environment variables (e.g., $HOME, $PATH), expand them to their corresponding values.
You can use the getenv() function to retrieve the value of an environment variable.
//Step 5: Handle Signals
Implement signal handling for SIGINT (Ctrl+C), SIGQUIT (Ctrl+$$, and SIGTERM.
In interactive mode, SIGINT should display a new prompt on a new line, SIGQUIT should do nothing, and SIGTERM should exit the shell.
//Step 6: Handle Errors
Implement error handling for various scenarios, such as:
Command not found
Insufficient permissions
Memory allocation failures
System call errors

//////Execute External Commands

//Step 1: Fork a Child Process
Use fork() to create a new child process.
If fork() returns 0, you are in the child process.
If fork() returns a positive value, you are in the parent process.
//Step 2: Execute the Command
In the child process, use execve() to replace the child process's image with the specified program.
The execve() function takes three arguments:
pathname: The path to the executable.
argv[]: An array of pointers to the arguments.
envp[]: An array of pointers to the environment variables.
//Step 3: Wait for the Child Process
In the parent process, use wait() to wait for the child process to finish.
wait() returns the exit status of the child process.
